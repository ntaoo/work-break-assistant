// Auto-generated from timer.html.
// DO NOT EDIT.

library x_timer;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'dart:async';
import 'dart:html';



class TimerComponent extends WebComponent  with Observable {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /**
   * Shadow root for this component. We use 'var' to allow simulating shadow DOM
   * on browsers that don't support this feature.
   */
  var _root;
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div>
          Work Minutes<br>
          <input type="text" placeholder="Work Minutes"><br><br>
          Rest Minutes<br>
          <input type="text" placeholder="Rest Minutes"><br>
          <button>Start</button><br>
          <div style="visibility:{{workRemainMinutesVisibility}};"></div>
          <div style="visibility:{{restRemainMinutesVisibility}};"></div>
        </div>
      ''');
  autogenerated.ButtonElement __e3;
  autogenerated.DivElement __e5, __e7;
  autogenerated.InputElement __e1, __e2;
  autogenerated.Template __t;

  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.nodes.add(__shadowTemplate.clone(true));
    __e1 = _root.nodes[1].nodes[3];
    __t.listen(__e1.onInput, ($event) { workMinutesString = __e1.value; });
    __t.oneWayBind(() => workMinutesString, (e) { if (__e1.value != e) __e1.value = e; }, false, false);
    __e2 = _root.nodes[1].nodes[9];
    __t.listen(__e2.onInput, ($event) { restMinutesString = __e2.value; });
    __t.oneWayBind(() => restMinutesString, (e) { if (__e2.value != e) __e2.value = e; }, false, false);
    __e3 = _root.nodes[1].nodes[12];
    __t.listen(__e3.onClick, ($event) { startWorkTimer(); });
    __e5 = _root.nodes[1].nodes[15];
    var __binding4 = __t.contentBind(() => workRemainMinutes, false);
    __e5.nodes.addAll([new autogenerated.Text('Work Time Remains: '),
        __binding4,
        new autogenerated.Text(' Minutes')]);
    __t.bind(() => workRemainMinutesVisibility,  (__e) { __e5.attributes['style'] = 'visibility:${__e.newValue};'; }, false);
    __e7 = _root.nodes[1].nodes[17];
    var __binding6 = __t.contentBind(() => restRemainMinutes, false);
    __e7.nodes.addAll([new autogenerated.Text('Rest Time Remains: '),
        __binding6,
        new autogenerated.Text(' Minutes')]);
    __t.bind(() => restRemainMinutesVisibility,  (__e) { __e7.attributes['style'] = 'visibility:${__e.newValue};'; }, false);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e1 = __e2 = __e3 = __e5 = __e7 = null;
  }

  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }

  /** Original code from the component. */

  int __$workMinutes = 90;
  int get workMinutes {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'workMinutes');
    }
    return __$workMinutes;
  }
  set workMinutes(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'workMinutes',
          __$workMinutes, value);
    }
    __$workMinutes = value;
  }
  int __$restMinutes = 15;
  int get restMinutes {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'restMinutes');
    }
    return __$restMinutes;
  }
  set restMinutes(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'restMinutes',
          __$restMinutes, value);
    }
    __$restMinutes = value;
  }
  int __$workRemainMinutes;
  int get workRemainMinutes {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'workRemainMinutes');
    }
    return __$workRemainMinutes;
  }
  set workRemainMinutes(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'workRemainMinutes',
          __$workRemainMinutes, value);
    }
    __$workRemainMinutes = value;
  }
  int __$restRemainMinutes;
  int get restRemainMinutes {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'restRemainMinutes');
    }
    return __$restRemainMinutes;
  }
  set restRemainMinutes(int value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'restRemainMinutes',
          __$restRemainMinutes, value);
    }
    __$restRemainMinutes = value;
  }
  String __$workRemainMinutesVisibility = 'hidden';
  String get workRemainMinutesVisibility {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'workRemainMinutesVisibility');
    }
    return __$workRemainMinutesVisibility;
  }
  set workRemainMinutesVisibility(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'workRemainMinutesVisibility',
          __$workRemainMinutesVisibility, value);
    }
    __$workRemainMinutesVisibility = value;
  }
  String __$restRemainMinutesVisibility = 'hidden';
  String get restRemainMinutesVisibility {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'restRemainMinutesVisibility');
    }
    return __$restRemainMinutesVisibility;
  }
  set restRemainMinutesVisibility(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'restRemainMinutesVisibility',
          __$restRemainMinutesVisibility, value);
    }
    __$restRemainMinutesVisibility = value;
  }


  String get workMinutesString => workMinutes.toString();
  set workMinutesString(value) {
    try {
      workMinutes = int.parse(value);
    } on Exception catch(e) {
      workMinutes = 0;
    }
  }

  String get restMinutesString => restMinutes.toString();
  set restMinutesString(value) {
    try {
      restMinutes = int.parse(value);
    } on Exception catch(e) {
      restMinutes = 0;
    }
  }


  void startWorkTimer() {
    workRemainMinutes = workMinutes;
    workRemainMinutesVisibility = 'visible';
    restRemainMinutesVisibility = 'hidden';

    new Timer.periodic(const Duration(minutes: 1), (timer) {
      workRemainMinutes -= 1;
      if (workRemainMinutes <= 0) {
        window.alert('finish!');
        timer.cancel();
        startRestTimer();
      }
    });
  }

  void startRestTimer() {
    restRemainMinutes = restMinutes;
    workRemainMinutesVisibility = 'hidden';
    restRemainMinutesVisibility = 'visible';

    new Timer.periodic(const Duration(minutes: 1), (timer) {
      restRemainMinutes -= 1;
      if (restRemainMinutes <= 0) {
        window.alert('rest finish!');
        timer.cancel();
        startWorkTimer();
      }
    });
  }
}

//@ sourceMappingURL=timer.dart.map